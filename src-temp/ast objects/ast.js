/**
 * Root of a Processing AST
 */

import AstClass from "./ast-class";
import AstInterface from "./ast-interface";

import getLocalNames from "../get-local-names";
import generateMetadata from "../generate-meta-data";
import setWeight from "../set-weight";
import sortByWeight from "../sort-by-weight";
import contextMappedString from "../context-mapped-string.js";

import globalMembers from "../get-global-members";
import PConstants from "../pconstants";
import defaultScope from "../default-scope";

export default class Ast {
  constructor(declaredClasses, strings, astNodes) {
    this.declaredClasses = declaredClasses;
    this.sourceStrings = strings;
    this.astNodes = astNodes;
  }

  getSourceStrings() {
    return this.sourceStrings;
  }

  generateMetadata() {
    generateMetadata(this.declaredClasses);
  }

  setWeight() {
    setWeight(this.declaredClasses);
  }

  replaceContext(localNames) {
    return (subject) => {
      let name = subject.name;
      if(localNames.hasOwnProperty(name)) {
        return name;
      }
      if(globalMembers.hasOwnProperty(name) ||
         PConstants.hasOwnProperty(name) ||
         defaultScope.hasOwnProperty(name)) {
        return "$p." + name;
      }
      return name;
    };
  }

  toString() {
    let classes = [],
        otherStatements = [],
        statement;
    for (let i = 0, len = this.astNodes.length; i < len; ++i) {
      statement = this.astNodes[i];
      if (statement instanceof AstClass || statement instanceof AstInterface) {
        classes.push(statement);
      } else {
        otherStatements.push(statement);
      }
    }

    sortByWeight(classes);

    let localNames = getLocalNames(this.astNodes);
    let replaceContext = this.replaceContext(localNames);

    let result = [
      '// this code was autogenerated from PJS',
      '(function($p) {',
      contextMappedString(classes, replaceContext, ''),
      contextMappedString(otherStatements, replaceContext, ''),
      '})'
    ].join('\n');

    return result;
  }
};
