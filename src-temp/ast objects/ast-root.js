/**
 * Root of a Processing AST
 */

import generateMetadata from "../generate-meta-data";
import setWeight from "../set-weight";

export default class Ast {
  constructor(astNodes) {
    this.astNodes = astNodes;
  }

  generateMetadata() {
    generateMetadata(this);
  }

  setWeight() {
    setWeight(this);
  }

  toString() {
    let classes = [],
        otherStatements = [],
        statement;
    for (let i = 0, len = this.astNodes.length; i < len; ++i) {
      statement = this.astNodes[i];
      if (statement instanceof AstClass || statement instanceof AstInterface) {
        classes.push(statement);
      } else {
        otherStatements.push(statement);
      }
    }
    sortByWeight(classes);

    let localNames = getLocalNames(this.astNodes);

    // FIXME: TODO: where is this used?
    replaceContext = function (subject) {
      let name = subject.name;
      if(localNames.hasOwnProperty(name)) {
        return name;
      }
      if(globalMembers.hasOwnProperty(name) ||
         PConstants.hasOwnProperty(name) ||
         defaultScope.hasOwnProperty(name)) {
        return "$p." + name;
      }
      return name;
    };

    let result = "// this code was autogenerated from PJS\n" +
      "(function($p) {\n" +
      classes.join('') + "\n" +
      otherStatements.join('') + "\n})";
    replaceContext = null;
    return result;
  }
};
